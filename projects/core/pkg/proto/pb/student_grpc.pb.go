// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: proto/student.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StudentServiceClient is the client API for StudentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StudentServiceClient interface {
	RegisterParent(ctx context.Context, in *CreateParentIn, opts ...grpc.CallOption) (*CreateParentOut, error)
	GetStudents(ctx context.Context, in *GetStudentsIn, opts ...grpc.CallOption) (*GetStudentsOut, error)
	AddStudent(ctx context.Context, in *AddStudentIn, opts ...grpc.CallOption) (*AddStudentOut, error)
	EditStudent(ctx context.Context, in *EditStudentIn, opts ...grpc.CallOption) (*EditStudentOut, error)
	RemoveStudent(ctx context.Context, in *RemoveStudentIn, opts ...grpc.CallOption) (*RemoveStudentOut, error)
	UploadStudentImage(ctx context.Context, in *UploadStudentImageIn, opts ...grpc.CallOption) (*UploadStudentImageOut, error)
}

type studentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStudentServiceClient(cc grpc.ClientConnInterface) StudentServiceClient {
	return &studentServiceClient{cc}
}

func (c *studentServiceClient) RegisterParent(ctx context.Context, in *CreateParentIn, opts ...grpc.CallOption) (*CreateParentOut, error) {
	out := new(CreateParentOut)
	err := c.cc.Invoke(ctx, "/core.StudentService/RegisterParent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentServiceClient) GetStudents(ctx context.Context, in *GetStudentsIn, opts ...grpc.CallOption) (*GetStudentsOut, error) {
	out := new(GetStudentsOut)
	err := c.cc.Invoke(ctx, "/core.StudentService/GetStudents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentServiceClient) AddStudent(ctx context.Context, in *AddStudentIn, opts ...grpc.CallOption) (*AddStudentOut, error) {
	out := new(AddStudentOut)
	err := c.cc.Invoke(ctx, "/core.StudentService/AddStudent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentServiceClient) EditStudent(ctx context.Context, in *EditStudentIn, opts ...grpc.CallOption) (*EditStudentOut, error) {
	out := new(EditStudentOut)
	err := c.cc.Invoke(ctx, "/core.StudentService/EditStudent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentServiceClient) RemoveStudent(ctx context.Context, in *RemoveStudentIn, opts ...grpc.CallOption) (*RemoveStudentOut, error) {
	out := new(RemoveStudentOut)
	err := c.cc.Invoke(ctx, "/core.StudentService/RemoveStudent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentServiceClient) UploadStudentImage(ctx context.Context, in *UploadStudentImageIn, opts ...grpc.CallOption) (*UploadStudentImageOut, error) {
	out := new(UploadStudentImageOut)
	err := c.cc.Invoke(ctx, "/core.StudentService/UploadStudentImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StudentServiceServer is the server API for StudentService service.
// All implementations must embed UnimplementedStudentServiceServer
// for forward compatibility
type StudentServiceServer interface {
	RegisterParent(context.Context, *CreateParentIn) (*CreateParentOut, error)
	GetStudents(context.Context, *GetStudentsIn) (*GetStudentsOut, error)
	AddStudent(context.Context, *AddStudentIn) (*AddStudentOut, error)
	EditStudent(context.Context, *EditStudentIn) (*EditStudentOut, error)
	RemoveStudent(context.Context, *RemoveStudentIn) (*RemoveStudentOut, error)
	UploadStudentImage(context.Context, *UploadStudentImageIn) (*UploadStudentImageOut, error)
	mustEmbedUnimplementedStudentServiceServer()
}

// UnimplementedStudentServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStudentServiceServer struct {
}

func (UnimplementedStudentServiceServer) RegisterParent(context.Context, *CreateParentIn) (*CreateParentOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterParent not implemented")
}
func (UnimplementedStudentServiceServer) GetStudents(context.Context, *GetStudentsIn) (*GetStudentsOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStudents not implemented")
}
func (UnimplementedStudentServiceServer) AddStudent(context.Context, *AddStudentIn) (*AddStudentOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddStudent not implemented")
}
func (UnimplementedStudentServiceServer) EditStudent(context.Context, *EditStudentIn) (*EditStudentOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditStudent not implemented")
}
func (UnimplementedStudentServiceServer) RemoveStudent(context.Context, *RemoveStudentIn) (*RemoveStudentOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveStudent not implemented")
}
func (UnimplementedStudentServiceServer) UploadStudentImage(context.Context, *UploadStudentImageIn) (*UploadStudentImageOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadStudentImage not implemented")
}
func (UnimplementedStudentServiceServer) mustEmbedUnimplementedStudentServiceServer() {}

// UnsafeStudentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StudentServiceServer will
// result in compilation errors.
type UnsafeStudentServiceServer interface {
	mustEmbedUnimplementedStudentServiceServer()
}

func RegisterStudentServiceServer(s grpc.ServiceRegistrar, srv StudentServiceServer) {
	s.RegisterService(&StudentService_ServiceDesc, srv)
}

func _StudentService_RegisterParent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateParentIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentServiceServer).RegisterParent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.StudentService/RegisterParent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentServiceServer).RegisterParent(ctx, req.(*CreateParentIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudentService_GetStudents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStudentsIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentServiceServer).GetStudents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.StudentService/GetStudents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentServiceServer).GetStudents(ctx, req.(*GetStudentsIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudentService_AddStudent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddStudentIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentServiceServer).AddStudent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.StudentService/AddStudent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentServiceServer).AddStudent(ctx, req.(*AddStudentIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudentService_EditStudent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditStudentIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentServiceServer).EditStudent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.StudentService/EditStudent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentServiceServer).EditStudent(ctx, req.(*EditStudentIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudentService_RemoveStudent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveStudentIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentServiceServer).RemoveStudent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.StudentService/RemoveStudent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentServiceServer).RemoveStudent(ctx, req.(*RemoveStudentIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudentService_UploadStudentImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadStudentImageIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentServiceServer).UploadStudentImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.StudentService/UploadStudentImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentServiceServer).UploadStudentImage(ctx, req.(*UploadStudentImageIn))
	}
	return interceptor(ctx, in, info, handler)
}

// StudentService_ServiceDesc is the grpc.ServiceDesc for StudentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StudentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "core.StudentService",
	HandlerType: (*StudentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterParent",
			Handler:    _StudentService_RegisterParent_Handler,
		},
		{
			MethodName: "GetStudents",
			Handler:    _StudentService_GetStudents_Handler,
		},
		{
			MethodName: "AddStudent",
			Handler:    _StudentService_AddStudent_Handler,
		},
		{
			MethodName: "EditStudent",
			Handler:    _StudentService_EditStudent_Handler,
		},
		{
			MethodName: "RemoveStudent",
			Handler:    _StudentService_RemoveStudent_Handler,
		},
		{
			MethodName: "UploadStudentImage",
			Handler:    _StudentService_UploadStudentImage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/student.proto",
}
