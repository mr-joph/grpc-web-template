// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: proto/todolist.proto

package pb

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TodoListServiceClient is the client API for TodoListService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TodoListServiceClient interface {
	GetTodos(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetTodosOut, error)
	NewTodo(ctx context.Context, in *NewTodoIn, opts ...grpc.CallOption) (*NewTodoOut, error)
	EditTodo(ctx context.Context, in *Todo, opts ...grpc.CallOption) (*EditTodoOut, error)
	CheckTodo(ctx context.Context, in *CheckTodoIn, opts ...grpc.CallOption) (*CheckTodoOut, error)
	DeleteTodo(ctx context.Context, in *DeleteTodoIn, opts ...grpc.CallOption) (*empty.Empty, error)
	CompleteAll(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	ClearCompleted(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
}

type todoListServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTodoListServiceClient(cc grpc.ClientConnInterface) TodoListServiceClient {
	return &todoListServiceClient{cc}
}

func (c *todoListServiceClient) GetTodos(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetTodosOut, error) {
	out := new(GetTodosOut)
	err := c.cc.Invoke(ctx, "/core.TodoListService/GetTodos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoListServiceClient) NewTodo(ctx context.Context, in *NewTodoIn, opts ...grpc.CallOption) (*NewTodoOut, error) {
	out := new(NewTodoOut)
	err := c.cc.Invoke(ctx, "/core.TodoListService/NewTodo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoListServiceClient) EditTodo(ctx context.Context, in *Todo, opts ...grpc.CallOption) (*EditTodoOut, error) {
	out := new(EditTodoOut)
	err := c.cc.Invoke(ctx, "/core.TodoListService/EditTodo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoListServiceClient) CheckTodo(ctx context.Context, in *CheckTodoIn, opts ...grpc.CallOption) (*CheckTodoOut, error) {
	out := new(CheckTodoOut)
	err := c.cc.Invoke(ctx, "/core.TodoListService/CheckTodo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoListServiceClient) DeleteTodo(ctx context.Context, in *DeleteTodoIn, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/core.TodoListService/DeleteTodo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoListServiceClient) CompleteAll(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/core.TodoListService/CompleteAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoListServiceClient) ClearCompleted(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/core.TodoListService/ClearCompleted", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TodoListServiceServer is the server API for TodoListService service.
// All implementations must embed UnimplementedTodoListServiceServer
// for forward compatibility
type TodoListServiceServer interface {
	GetTodos(context.Context, *empty.Empty) (*GetTodosOut, error)
	NewTodo(context.Context, *NewTodoIn) (*NewTodoOut, error)
	EditTodo(context.Context, *Todo) (*EditTodoOut, error)
	CheckTodo(context.Context, *CheckTodoIn) (*CheckTodoOut, error)
	DeleteTodo(context.Context, *DeleteTodoIn) (*empty.Empty, error)
	CompleteAll(context.Context, *empty.Empty) (*empty.Empty, error)
	ClearCompleted(context.Context, *empty.Empty) (*empty.Empty, error)
	mustEmbedUnimplementedTodoListServiceServer()
}

// UnimplementedTodoListServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTodoListServiceServer struct {
}

func (UnimplementedTodoListServiceServer) GetTodos(context.Context, *empty.Empty) (*GetTodosOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTodos not implemented")
}
func (UnimplementedTodoListServiceServer) NewTodo(context.Context, *NewTodoIn) (*NewTodoOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewTodo not implemented")
}
func (UnimplementedTodoListServiceServer) EditTodo(context.Context, *Todo) (*EditTodoOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditTodo not implemented")
}
func (UnimplementedTodoListServiceServer) CheckTodo(context.Context, *CheckTodoIn) (*CheckTodoOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckTodo not implemented")
}
func (UnimplementedTodoListServiceServer) DeleteTodo(context.Context, *DeleteTodoIn) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTodo not implemented")
}
func (UnimplementedTodoListServiceServer) CompleteAll(context.Context, *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteAll not implemented")
}
func (UnimplementedTodoListServiceServer) ClearCompleted(context.Context, *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearCompleted not implemented")
}
func (UnimplementedTodoListServiceServer) mustEmbedUnimplementedTodoListServiceServer() {}

// UnsafeTodoListServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TodoListServiceServer will
// result in compilation errors.
type UnsafeTodoListServiceServer interface {
	mustEmbedUnimplementedTodoListServiceServer()
}

func RegisterTodoListServiceServer(s grpc.ServiceRegistrar, srv TodoListServiceServer) {
	s.RegisterService(&TodoListService_ServiceDesc, srv)
}

func _TodoListService_GetTodos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoListServiceServer).GetTodos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.TodoListService/GetTodos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoListServiceServer).GetTodos(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TodoListService_NewTodo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewTodoIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoListServiceServer).NewTodo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.TodoListService/NewTodo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoListServiceServer).NewTodo(ctx, req.(*NewTodoIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _TodoListService_EditTodo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Todo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoListServiceServer).EditTodo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.TodoListService/EditTodo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoListServiceServer).EditTodo(ctx, req.(*Todo))
	}
	return interceptor(ctx, in, info, handler)
}

func _TodoListService_CheckTodo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckTodoIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoListServiceServer).CheckTodo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.TodoListService/CheckTodo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoListServiceServer).CheckTodo(ctx, req.(*CheckTodoIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _TodoListService_DeleteTodo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTodoIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoListServiceServer).DeleteTodo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.TodoListService/DeleteTodo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoListServiceServer).DeleteTodo(ctx, req.(*DeleteTodoIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _TodoListService_CompleteAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoListServiceServer).CompleteAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.TodoListService/CompleteAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoListServiceServer).CompleteAll(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TodoListService_ClearCompleted_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoListServiceServer).ClearCompleted(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.TodoListService/ClearCompleted",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoListServiceServer).ClearCompleted(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// TodoListService_ServiceDesc is the grpc.ServiceDesc for TodoListService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TodoListService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "core.TodoListService",
	HandlerType: (*TodoListServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTodos",
			Handler:    _TodoListService_GetTodos_Handler,
		},
		{
			MethodName: "NewTodo",
			Handler:    _TodoListService_NewTodo_Handler,
		},
		{
			MethodName: "EditTodo",
			Handler:    _TodoListService_EditTodo_Handler,
		},
		{
			MethodName: "CheckTodo",
			Handler:    _TodoListService_CheckTodo_Handler,
		},
		{
			MethodName: "DeleteTodo",
			Handler:    _TodoListService_DeleteTodo_Handler,
		},
		{
			MethodName: "CompleteAll",
			Handler:    _TodoListService_CompleteAll_Handler,
		},
		{
			MethodName: "ClearCompleted",
			Handler:    _TodoListService_ClearCompleted_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/todolist.proto",
}
