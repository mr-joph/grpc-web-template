// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: proto/teacher.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TeacherServiceClient is the client API for TeacherService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TeacherServiceClient interface {
	// general
	RegisterTeacher(ctx context.Context, in *RegisterTeacherIn, opts ...grpc.CallOption) (*RegisterTeacherOut, error)
	SearchTeachers(ctx context.Context, in *SearchTeacherIn, opts ...grpc.CallOption) (*SearchTeacherOut, error)
	EditEnrollmentStep(ctx context.Context, in *EditEnrollmentStepIn, opts ...grpc.CallOption) (*EditEnrollmentStepOut, error)
	ConfirmLiveClass(ctx context.Context, in *ConfirmLiveClasIn, opts ...grpc.CallOption) (*ConfirmLiveClassOut, error)
	// for admins
	GetEnrollments(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetEnrollmentsOut, error)
	ConfirmEnrollment(ctx context.Context, in *ConfirmEnrollmentIn, opts ...grpc.CallOption) (*ConfirmEnrollmentOut, error)
	GetPendingEnrollments(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetPendingEnrollmentsOut, error)
	// for teachers
	GetEnrollment(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Enrollment, error)
	EnrollBasicInfo(ctx context.Context, in *EnrollBasicInfoIn, opts ...grpc.CallOption) (*Enrollment, error)
	EnrollCertificates(ctx context.Context, in *EnrollCertificatesIn, opts ...grpc.CallOption) (*Enrollment, error)
	EnrollDemoClass(ctx context.Context, in *EnrollDemoClassIn, opts ...grpc.CallOption) (*Enrollment, error)
	EnrollAcceptContract(ctx context.Context, in *EnrollAcceptContractIn, opts ...grpc.CallOption) (*Enrollment, error)
}

type teacherServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTeacherServiceClient(cc grpc.ClientConnInterface) TeacherServiceClient {
	return &teacherServiceClient{cc}
}

func (c *teacherServiceClient) RegisterTeacher(ctx context.Context, in *RegisterTeacherIn, opts ...grpc.CallOption) (*RegisterTeacherOut, error) {
	out := new(RegisterTeacherOut)
	err := c.cc.Invoke(ctx, "/core.TeacherService/RegisterTeacher", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teacherServiceClient) SearchTeachers(ctx context.Context, in *SearchTeacherIn, opts ...grpc.CallOption) (*SearchTeacherOut, error) {
	out := new(SearchTeacherOut)
	err := c.cc.Invoke(ctx, "/core.TeacherService/SearchTeachers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teacherServiceClient) EditEnrollmentStep(ctx context.Context, in *EditEnrollmentStepIn, opts ...grpc.CallOption) (*EditEnrollmentStepOut, error) {
	out := new(EditEnrollmentStepOut)
	err := c.cc.Invoke(ctx, "/core.TeacherService/EditEnrollmentStep", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teacherServiceClient) ConfirmLiveClass(ctx context.Context, in *ConfirmLiveClasIn, opts ...grpc.CallOption) (*ConfirmLiveClassOut, error) {
	out := new(ConfirmLiveClassOut)
	err := c.cc.Invoke(ctx, "/core.TeacherService/ConfirmLiveClass", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teacherServiceClient) GetEnrollments(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetEnrollmentsOut, error) {
	out := new(GetEnrollmentsOut)
	err := c.cc.Invoke(ctx, "/core.TeacherService/GetEnrollments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teacherServiceClient) ConfirmEnrollment(ctx context.Context, in *ConfirmEnrollmentIn, opts ...grpc.CallOption) (*ConfirmEnrollmentOut, error) {
	out := new(ConfirmEnrollmentOut)
	err := c.cc.Invoke(ctx, "/core.TeacherService/ConfirmEnrollment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teacherServiceClient) GetPendingEnrollments(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetPendingEnrollmentsOut, error) {
	out := new(GetPendingEnrollmentsOut)
	err := c.cc.Invoke(ctx, "/core.TeacherService/GetPendingEnrollments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teacherServiceClient) GetEnrollment(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Enrollment, error) {
	out := new(Enrollment)
	err := c.cc.Invoke(ctx, "/core.TeacherService/GetEnrollment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teacherServiceClient) EnrollBasicInfo(ctx context.Context, in *EnrollBasicInfoIn, opts ...grpc.CallOption) (*Enrollment, error) {
	out := new(Enrollment)
	err := c.cc.Invoke(ctx, "/core.TeacherService/EnrollBasicInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teacherServiceClient) EnrollCertificates(ctx context.Context, in *EnrollCertificatesIn, opts ...grpc.CallOption) (*Enrollment, error) {
	out := new(Enrollment)
	err := c.cc.Invoke(ctx, "/core.TeacherService/EnrollCertificates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teacherServiceClient) EnrollDemoClass(ctx context.Context, in *EnrollDemoClassIn, opts ...grpc.CallOption) (*Enrollment, error) {
	out := new(Enrollment)
	err := c.cc.Invoke(ctx, "/core.TeacherService/EnrollDemoClass", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teacherServiceClient) EnrollAcceptContract(ctx context.Context, in *EnrollAcceptContractIn, opts ...grpc.CallOption) (*Enrollment, error) {
	out := new(Enrollment)
	err := c.cc.Invoke(ctx, "/core.TeacherService/EnrollAcceptContract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TeacherServiceServer is the server API for TeacherService service.
// All implementations must embed UnimplementedTeacherServiceServer
// for forward compatibility
type TeacherServiceServer interface {
	// general
	RegisterTeacher(context.Context, *RegisterTeacherIn) (*RegisterTeacherOut, error)
	SearchTeachers(context.Context, *SearchTeacherIn) (*SearchTeacherOut, error)
	EditEnrollmentStep(context.Context, *EditEnrollmentStepIn) (*EditEnrollmentStepOut, error)
	ConfirmLiveClass(context.Context, *ConfirmLiveClasIn) (*ConfirmLiveClassOut, error)
	// for admins
	GetEnrollments(context.Context, *Empty) (*GetEnrollmentsOut, error)
	ConfirmEnrollment(context.Context, *ConfirmEnrollmentIn) (*ConfirmEnrollmentOut, error)
	GetPendingEnrollments(context.Context, *Empty) (*GetPendingEnrollmentsOut, error)
	// for teachers
	GetEnrollment(context.Context, *Empty) (*Enrollment, error)
	EnrollBasicInfo(context.Context, *EnrollBasicInfoIn) (*Enrollment, error)
	EnrollCertificates(context.Context, *EnrollCertificatesIn) (*Enrollment, error)
	EnrollDemoClass(context.Context, *EnrollDemoClassIn) (*Enrollment, error)
	EnrollAcceptContract(context.Context, *EnrollAcceptContractIn) (*Enrollment, error)
	mustEmbedUnimplementedTeacherServiceServer()
}

// UnimplementedTeacherServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTeacherServiceServer struct {
}

func (UnimplementedTeacherServiceServer) RegisterTeacher(context.Context, *RegisterTeacherIn) (*RegisterTeacherOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterTeacher not implemented")
}
func (UnimplementedTeacherServiceServer) SearchTeachers(context.Context, *SearchTeacherIn) (*SearchTeacherOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchTeachers not implemented")
}
func (UnimplementedTeacherServiceServer) EditEnrollmentStep(context.Context, *EditEnrollmentStepIn) (*EditEnrollmentStepOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditEnrollmentStep not implemented")
}
func (UnimplementedTeacherServiceServer) ConfirmLiveClass(context.Context, *ConfirmLiveClasIn) (*ConfirmLiveClassOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmLiveClass not implemented")
}
func (UnimplementedTeacherServiceServer) GetEnrollments(context.Context, *Empty) (*GetEnrollmentsOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEnrollments not implemented")
}
func (UnimplementedTeacherServiceServer) ConfirmEnrollment(context.Context, *ConfirmEnrollmentIn) (*ConfirmEnrollmentOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmEnrollment not implemented")
}
func (UnimplementedTeacherServiceServer) GetPendingEnrollments(context.Context, *Empty) (*GetPendingEnrollmentsOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPendingEnrollments not implemented")
}
func (UnimplementedTeacherServiceServer) GetEnrollment(context.Context, *Empty) (*Enrollment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEnrollment not implemented")
}
func (UnimplementedTeacherServiceServer) EnrollBasicInfo(context.Context, *EnrollBasicInfoIn) (*Enrollment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnrollBasicInfo not implemented")
}
func (UnimplementedTeacherServiceServer) EnrollCertificates(context.Context, *EnrollCertificatesIn) (*Enrollment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnrollCertificates not implemented")
}
func (UnimplementedTeacherServiceServer) EnrollDemoClass(context.Context, *EnrollDemoClassIn) (*Enrollment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnrollDemoClass not implemented")
}
func (UnimplementedTeacherServiceServer) EnrollAcceptContract(context.Context, *EnrollAcceptContractIn) (*Enrollment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnrollAcceptContract not implemented")
}
func (UnimplementedTeacherServiceServer) mustEmbedUnimplementedTeacherServiceServer() {}

// UnsafeTeacherServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TeacherServiceServer will
// result in compilation errors.
type UnsafeTeacherServiceServer interface {
	mustEmbedUnimplementedTeacherServiceServer()
}

func RegisterTeacherServiceServer(s grpc.ServiceRegistrar, srv TeacherServiceServer) {
	s.RegisterService(&TeacherService_ServiceDesc, srv)
}

func _TeacherService_RegisterTeacher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterTeacherIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeacherServiceServer).RegisterTeacher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.TeacherService/RegisterTeacher",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeacherServiceServer).RegisterTeacher(ctx, req.(*RegisterTeacherIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeacherService_SearchTeachers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchTeacherIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeacherServiceServer).SearchTeachers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.TeacherService/SearchTeachers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeacherServiceServer).SearchTeachers(ctx, req.(*SearchTeacherIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeacherService_EditEnrollmentStep_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditEnrollmentStepIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeacherServiceServer).EditEnrollmentStep(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.TeacherService/EditEnrollmentStep",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeacherServiceServer).EditEnrollmentStep(ctx, req.(*EditEnrollmentStepIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeacherService_ConfirmLiveClass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfirmLiveClasIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeacherServiceServer).ConfirmLiveClass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.TeacherService/ConfirmLiveClass",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeacherServiceServer).ConfirmLiveClass(ctx, req.(*ConfirmLiveClasIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeacherService_GetEnrollments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeacherServiceServer).GetEnrollments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.TeacherService/GetEnrollments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeacherServiceServer).GetEnrollments(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeacherService_ConfirmEnrollment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfirmEnrollmentIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeacherServiceServer).ConfirmEnrollment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.TeacherService/ConfirmEnrollment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeacherServiceServer).ConfirmEnrollment(ctx, req.(*ConfirmEnrollmentIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeacherService_GetPendingEnrollments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeacherServiceServer).GetPendingEnrollments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.TeacherService/GetPendingEnrollments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeacherServiceServer).GetPendingEnrollments(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeacherService_GetEnrollment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeacherServiceServer).GetEnrollment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.TeacherService/GetEnrollment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeacherServiceServer).GetEnrollment(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeacherService_EnrollBasicInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnrollBasicInfoIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeacherServiceServer).EnrollBasicInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.TeacherService/EnrollBasicInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeacherServiceServer).EnrollBasicInfo(ctx, req.(*EnrollBasicInfoIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeacherService_EnrollCertificates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnrollCertificatesIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeacherServiceServer).EnrollCertificates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.TeacherService/EnrollCertificates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeacherServiceServer).EnrollCertificates(ctx, req.(*EnrollCertificatesIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeacherService_EnrollDemoClass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnrollDemoClassIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeacherServiceServer).EnrollDemoClass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.TeacherService/EnrollDemoClass",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeacherServiceServer).EnrollDemoClass(ctx, req.(*EnrollDemoClassIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeacherService_EnrollAcceptContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnrollAcceptContractIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeacherServiceServer).EnrollAcceptContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.TeacherService/EnrollAcceptContract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeacherServiceServer).EnrollAcceptContract(ctx, req.(*EnrollAcceptContractIn))
	}
	return interceptor(ctx, in, info, handler)
}

// TeacherService_ServiceDesc is the grpc.ServiceDesc for TeacherService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TeacherService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "core.TeacherService",
	HandlerType: (*TeacherServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterTeacher",
			Handler:    _TeacherService_RegisterTeacher_Handler,
		},
		{
			MethodName: "SearchTeachers",
			Handler:    _TeacherService_SearchTeachers_Handler,
		},
		{
			MethodName: "EditEnrollmentStep",
			Handler:    _TeacherService_EditEnrollmentStep_Handler,
		},
		{
			MethodName: "ConfirmLiveClass",
			Handler:    _TeacherService_ConfirmLiveClass_Handler,
		},
		{
			MethodName: "GetEnrollments",
			Handler:    _TeacherService_GetEnrollments_Handler,
		},
		{
			MethodName: "ConfirmEnrollment",
			Handler:    _TeacherService_ConfirmEnrollment_Handler,
		},
		{
			MethodName: "GetPendingEnrollments",
			Handler:    _TeacherService_GetPendingEnrollments_Handler,
		},
		{
			MethodName: "GetEnrollment",
			Handler:    _TeacherService_GetEnrollment_Handler,
		},
		{
			MethodName: "EnrollBasicInfo",
			Handler:    _TeacherService_EnrollBasicInfo_Handler,
		},
		{
			MethodName: "EnrollCertificates",
			Handler:    _TeacherService_EnrollCertificates_Handler,
		},
		{
			MethodName: "EnrollDemoClass",
			Handler:    _TeacherService_EnrollDemoClass_Handler,
		},
		{
			MethodName: "EnrollAcceptContract",
			Handler:    _TeacherService_EnrollAcceptContract_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/teacher.proto",
}
