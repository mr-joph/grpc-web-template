// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: proto/payment.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PaymentServiceClient is the client API for PaymentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PaymentServiceClient interface {
	GetCreaditPackages(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetCreaditPackagesOut, error)
	CreateCreditPackage(ctx context.Context, in *CreditPackage, opts ...grpc.CallOption) (*CreditPackage, error)
	EditCreditPackage(ctx context.Context, in *CreditPackage, opts ...grpc.CallOption) (*CreditPackage, error)
	RemoveCreditPackage(ctx context.Context, in *CreditPackage, opts ...grpc.CallOption) (*Empty, error)
	BuyCreditPackage(ctx context.Context, in *BuyCreditPackageIn, opts ...grpc.CallOption) (*BuyCreditPackageOut, error)
	RejectPayment(ctx context.Context, in *PaymentIntentIn, opts ...grpc.CallOption) (*Empty, error)
	PaymentIntent(ctx context.Context, in *PaymentIntentIn, opts ...grpc.CallOption) (*PaymentIntentOut, error)
}

type paymentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPaymentServiceClient(cc grpc.ClientConnInterface) PaymentServiceClient {
	return &paymentServiceClient{cc}
}

func (c *paymentServiceClient) GetCreaditPackages(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetCreaditPackagesOut, error) {
	out := new(GetCreaditPackagesOut)
	err := c.cc.Invoke(ctx, "/core.PaymentService/GetCreaditPackages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) CreateCreditPackage(ctx context.Context, in *CreditPackage, opts ...grpc.CallOption) (*CreditPackage, error) {
	out := new(CreditPackage)
	err := c.cc.Invoke(ctx, "/core.PaymentService/CreateCreditPackage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) EditCreditPackage(ctx context.Context, in *CreditPackage, opts ...grpc.CallOption) (*CreditPackage, error) {
	out := new(CreditPackage)
	err := c.cc.Invoke(ctx, "/core.PaymentService/EditCreditPackage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) RemoveCreditPackage(ctx context.Context, in *CreditPackage, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/core.PaymentService/RemoveCreditPackage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) BuyCreditPackage(ctx context.Context, in *BuyCreditPackageIn, opts ...grpc.CallOption) (*BuyCreditPackageOut, error) {
	out := new(BuyCreditPackageOut)
	err := c.cc.Invoke(ctx, "/core.PaymentService/BuyCreditPackage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) RejectPayment(ctx context.Context, in *PaymentIntentIn, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/core.PaymentService/RejectPayment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) PaymentIntent(ctx context.Context, in *PaymentIntentIn, opts ...grpc.CallOption) (*PaymentIntentOut, error) {
	out := new(PaymentIntentOut)
	err := c.cc.Invoke(ctx, "/core.PaymentService/PaymentIntent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PaymentServiceServer is the server API for PaymentService service.
// All implementations must embed UnimplementedPaymentServiceServer
// for forward compatibility
type PaymentServiceServer interface {
	GetCreaditPackages(context.Context, *Empty) (*GetCreaditPackagesOut, error)
	CreateCreditPackage(context.Context, *CreditPackage) (*CreditPackage, error)
	EditCreditPackage(context.Context, *CreditPackage) (*CreditPackage, error)
	RemoveCreditPackage(context.Context, *CreditPackage) (*Empty, error)
	BuyCreditPackage(context.Context, *BuyCreditPackageIn) (*BuyCreditPackageOut, error)
	RejectPayment(context.Context, *PaymentIntentIn) (*Empty, error)
	PaymentIntent(context.Context, *PaymentIntentIn) (*PaymentIntentOut, error)
	mustEmbedUnimplementedPaymentServiceServer()
}

// UnimplementedPaymentServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPaymentServiceServer struct {
}

func (UnimplementedPaymentServiceServer) GetCreaditPackages(context.Context, *Empty) (*GetCreaditPackagesOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCreaditPackages not implemented")
}
func (UnimplementedPaymentServiceServer) CreateCreditPackage(context.Context, *CreditPackage) (*CreditPackage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCreditPackage not implemented")
}
func (UnimplementedPaymentServiceServer) EditCreditPackage(context.Context, *CreditPackage) (*CreditPackage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditCreditPackage not implemented")
}
func (UnimplementedPaymentServiceServer) RemoveCreditPackage(context.Context, *CreditPackage) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveCreditPackage not implemented")
}
func (UnimplementedPaymentServiceServer) BuyCreditPackage(context.Context, *BuyCreditPackageIn) (*BuyCreditPackageOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuyCreditPackage not implemented")
}
func (UnimplementedPaymentServiceServer) RejectPayment(context.Context, *PaymentIntentIn) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RejectPayment not implemented")
}
func (UnimplementedPaymentServiceServer) PaymentIntent(context.Context, *PaymentIntentIn) (*PaymentIntentOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PaymentIntent not implemented")
}
func (UnimplementedPaymentServiceServer) mustEmbedUnimplementedPaymentServiceServer() {}

// UnsafePaymentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PaymentServiceServer will
// result in compilation errors.
type UnsafePaymentServiceServer interface {
	mustEmbedUnimplementedPaymentServiceServer()
}

func RegisterPaymentServiceServer(s grpc.ServiceRegistrar, srv PaymentServiceServer) {
	s.RegisterService(&PaymentService_ServiceDesc, srv)
}

func _PaymentService_GetCreaditPackages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).GetCreaditPackages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.PaymentService/GetCreaditPackages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).GetCreaditPackages(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_CreateCreditPackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreditPackage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).CreateCreditPackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.PaymentService/CreateCreditPackage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).CreateCreditPackage(ctx, req.(*CreditPackage))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_EditCreditPackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreditPackage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).EditCreditPackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.PaymentService/EditCreditPackage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).EditCreditPackage(ctx, req.(*CreditPackage))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_RemoveCreditPackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreditPackage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).RemoveCreditPackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.PaymentService/RemoveCreditPackage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).RemoveCreditPackage(ctx, req.(*CreditPackage))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_BuyCreditPackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuyCreditPackageIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).BuyCreditPackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.PaymentService/BuyCreditPackage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).BuyCreditPackage(ctx, req.(*BuyCreditPackageIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_RejectPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaymentIntentIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).RejectPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.PaymentService/RejectPayment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).RejectPayment(ctx, req.(*PaymentIntentIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_PaymentIntent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaymentIntentIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).PaymentIntent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.PaymentService/PaymentIntent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).PaymentIntent(ctx, req.(*PaymentIntentIn))
	}
	return interceptor(ctx, in, info, handler)
}

// PaymentService_ServiceDesc is the grpc.ServiceDesc for PaymentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PaymentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "core.PaymentService",
	HandlerType: (*PaymentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCreaditPackages",
			Handler:    _PaymentService_GetCreaditPackages_Handler,
		},
		{
			MethodName: "CreateCreditPackage",
			Handler:    _PaymentService_CreateCreditPackage_Handler,
		},
		{
			MethodName: "EditCreditPackage",
			Handler:    _PaymentService_EditCreditPackage_Handler,
		},
		{
			MethodName: "RemoveCreditPackage",
			Handler:    _PaymentService_RemoveCreditPackage_Handler,
		},
		{
			MethodName: "BuyCreditPackage",
			Handler:    _PaymentService_BuyCreditPackage_Handler,
		},
		{
			MethodName: "RejectPayment",
			Handler:    _PaymentService_RejectPayment_Handler,
		},
		{
			MethodName: "PaymentIntent",
			Handler:    _PaymentService_PaymentIntent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/payment.proto",
}
